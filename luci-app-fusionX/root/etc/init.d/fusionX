#!/bin/sh /etc/rc.common
clientname='test2'
clientlicense='Default'
clientloc='Default'
START=99

RX=0
TX=0

public_ip='0.0.0.0'

INTERFACES="wwan0 wwan1 wwan2 lan1 lan2 lan3 wan"

uci set fusionX.settings.is_monitoring='0'
uci commit fusionX

boot() {
    # This function runs only during boot
    chmod +x /etc/init.d/fusionX
    /etc/init.d/fusionX enable
    start
}

start(){
    
    # Get the MAC address of the device
    mac_address=$(cat /sys/class/net/eth0/address)
    
    # Set the clientname to the MAC address
    uci set fusionX.settings.clientname="$mac_address"
    
    echo "Set clientname to MAC address: $mac_address"
    
    sleep 10
    chmod +x /etc/init.d/fusionX
    /etc/init.d/fusionX enable
    
    new_ip=$(curl -s -X POST -d "client=$(uci get fusionX.settings.clientname)" http://102.132.169.58:4268/clientneg -m 5)
    new_ip=$(echo $new_ip | tr -d '"')
    echo "New IP: $new_ip"
    public_ip=$new_ip
    # Update the V2Ray configuration file with the new IP
    if [ -n "$new_ip" ]; then
        sed -i "s/\"address\": \".*\"/\"address\": \"$new_ip\"/" /etc/v2ray/config.json
        sed -i "s/\"id\": \".*\"/\"id\": \"6be3e1b2-05e1-46a1-ad36-70aaabaa8d12\"/" /etc/v2ray/config.json
        # sed -i 's/"user": ".*"/"user": "XPE"/' /etc/v2ray/config.json
        # sed -i 's/"pass": ".*"/"pass": "12345678"/' /etc/v2ray/config.json
        # Ensure SQM download and upload values are set correctly
        # sed -i 's/option download .*/option download '"'"'60000'"'"'/' /etc/config/sqm
        # sed -i 's/option upload .*/option upload '"'"'50000'"'"'/' /etc/config/sqm
        # sed -i 's/option enabled .*/option enabled '"'"'1'"'"'/' /etc/config/sqm
        # sed -i 's/option interface .*/option interface '"'"'eth0'"'"'/' /etc/config/sqm
        # logger -t fusionX "Updated SQM config with download: 60000 and upload: 50000"
        logger -t fusionX "Updated V2Ray config with new IP: $new_ip"
    else
        logger -t fusionX "Failed to retrieve new IP from management server"
    fi
    sleep 5
    # public_ip=$(curl -s ifconfig.me)
    # echo "Current public IP: $public_ip"
    
    # Update bond_enabled based on the response
    if echo "$public_ip" | grep -q "^102"; then
        uci set fusionX.settings.bond_enabled='1'
        uci set fusionX.settings.public_ip=$public_ip
    else
        # uci set fusionX.settings.bond_enabled='0'
        uci set fusionX.settings.public_ip='0.0.0.0'
    fi
    # if proxy.nft is in root folder, set bond_enabled to 0
    if [ -f /root/proxy.nft ]; then
        uci set fusionX.settings.bond_enabled='0'
    fi
    uci commit fusionX
    /etc/init.d/v2ray restart
    /etc/init.d/sqm restart
    fw4 restart
    echo "fusionX started" >> /etc/config/fusionXmon.txt
    monitor_bandwidth &
    # if(uci get fusionX.settings.isxms='1')
    # then
    #     startxms
    # else
    #     stopxms
    # fi
}

disable() {
    if [ -f /etc/nftables.d/proxy.nft ]; then
        new_ip=$(curl -s -X POST -d "client=$(uci get fusionX.settings.clientname)" http://102.132.169.58:4268/clientneg -m 5)
        new_ip=$(echo $new_ip | tr -d '"')
        echo "New IP: $new_ip"
        public_ip=$new_ip
        # Update the V2Ray configuration file with the new IP
        if [ -n "$new_ip" ]; then
            sed -i "s/\"address\": \".*\"/\"address\": \"$new_ip\"/" /etc/v2ray/config.json
            sed -i "s/\"id\": \".*\"/\"id\": \"6be3e1b2-05e1-46a1-ad36-70aaabaa8d12\"/" /etc/v2ray/config.json
            # sed -i 's/"user": ".*"/"user": "XPE"/' /etc/v2ray/config.json
            # sed -i 's/"pass": ".*"/"pass": "12345678"/' /etc/v2ray/config.json
            # Ensure SQM download and upload values are set correctly
            # sed -i 's/option download .*/option download '"'"'60000'"'"'/' /etc/config/sqm
            # sed -i 's/option upload .*/option upload '"'"'50000'"'"'/' /etc/config/sqm
            # sed -i 's/option enabled .*/option enabled '"'"'1'"'"'/' /etc/config/sqm
            # sed -i 's/option interface .*/option interface '"'"'eth0'"'"'/' /etc/config/sqm
            # logger -t fusionX "Updated SQM config with download: 60000 and upload: 50000"
            logger -t fusionX "Updated V2Ray config with new IP: $new_ip"
        else
            logger -t fusionX "Failed to retrieve new IP from management server"
        fi
        if echo "$public_ip" | grep -q "^102"; then
            uci set fusionX.settings.bond_enabled='1'
            uci set fusionX.settings.public_ip=$public_ip
        else
            # uci set fusionX.settings.bond_enabled='0'
            uci set fusionX.settings.public_ip='0.0.0.0'
        fi
        if [ -f /root/proxy.nft ]; then
            uci set fusionX.settings.bond_enabled='0'
        fi
        uci commit fusionX
        /etc/init.d/v2ray restart
        /etc/init.d/sqm restart
        fw4 restart
    else
        mv /etc/nftables.d/proxy.nft /root/
        fw4 restart
    fi
}
startxms(){
    sh /etc/init.d/xpexms.sh >/dev/null 2>&1 &
}

stopxms(){
    pkill -f xpexms.sh
}

get_total_rx() {
    total_rx=0
    for iface in $INTERFACES; do
        if [ -d "/sys/class/net/$iface" ]; then
            iface_rx=$(cat /sys/class/net/$iface/statistics/rx_bytes)
            total_rx=$((total_rx + iface_rx))
        fi
    done
    echo $total_rx
}

get_total_tx() {
    total_tx=0
    for iface in $INTERFACES; do
        if [ -d "/sys/class/net/$iface" ]; then
            iface_tx=$(cat /sys/class/net/$iface/statistics/tx_bytes)
            total_tx=$((total_tx + iface_tx))
        fi
    done
    echo $total_tx
}


monitor_bandwidth() {
    if [ "$(uci get fusionX.settings.is_monitoring)" -eq 1 ]; then
        return
    fi
    uci set fusionX.settings.is_monitoring='1'
    uci commit fusionX
    while true; do
        enabled= $(uci get fusionX.settings.bond_enabled)
        if [ "$enabled" -eq 1 ]; then
            # Get current total tx/rx values
            RX_now=$(get_total_rx)
            TX_now=$(get_total_tx)
            TIMESTAMP_now=$(date +%s)

            sleep 30

            RX_next=$(get_total_rx)
            TX_next=$(get_total_tx)
            # Calculate the differences

            RX_DIFF=$((RX_next - RX_now))
            TX_DIFF=$((TX_next - TX_now))
            TIME_DIFF=30  # Since we are sleeping for 30 seconds

            # Calculate the bandwidth usage (in bytes per second)
            RX_BW=$((RX_DIFF / TIME_DIFF))
            TX_BW=$((TX_DIFF / TIME_DIFF))

            # Output the results
            # echo "Received bandwidth: $RX_BW bytes/sec"
            # echo "Transmitted bandwidth: $TX_BW bytes/sec"
            echo "$(date '+%Y-%m-%d %H:%M:%S') RX: $RX_BW TX: $TX_BW" >> /etc/config/bandwidthusage.txt
            if [ "$(uci get fusionX.settings.public_ip)" != "0.0.0.0" ] && [ -n "$(uci get fusionX.settings.clientname)" ] && [ "$(uci get fusionX.settings.clientname)" != "none" ]; then
                curl -X POST -d "client=$(uci get fusionX.settings.clientname)&rx=$RX_BW&tx=$TX_BW" http://$public_ip:4269/clientinfo -m 5 > /dev/null 2>&1
            else
                echo "No public IP set" >> /etc/config/fusionXmon.txt
            fi
        fi
    done
}
startstop() {
    # Check if fusionX.settings.bond_enabled exists
    if ! uci get fusionX.settings.bond_enabled >/dev/null 2>&1; then
        # If it doesn't exist, create it and set to 0
        uci set fusionX.settings.bond_enabled='0'
        uci commit fusionX
        logger -t fusionX "Created fusionX.settings.bond_enabled and set to 0"
    fi
    enabled=$(uci get fusionX.settings.bond_enabled)
    if [ "$(uci get fusionX.settings.xmsname)" != "none" ] && [ "$(uci get fusionX.settings.clientcomp)" != "none" ]; then
        sh /etc/config/xpexms.sh >/dev/null 2>&1 &
    fi
    if [ "$enabled" -eq 1 ]; then
        logger -t fusionX "stopping bonding..."
        if [ -f /etc/nftables.d/proxy.nft ]; then
            mv /etc/nftables.d/proxy.nft /root/
            logger -t fusionX "File /etc/nftables.d/proxy.nft moved"
        else
            logger -t fusionX "File /etc/nftables.d/proxy.nft does not exist"
        fi
        uci set fusionX.settings.bond_enabled='0'
        uci commit fusionX
        fw4 restart
    else
        logger -t fusionX "Starting bonding..."
        # curl -X POST -d "title=$clientname $clientlicense $clientloc" http://102.132.169.58:4268/clientneg -o /root/proxy.nft
        new_ip=$(curl -s -X POST -d "client=$(uci get fusionX.settings.clientname)" http://102.132.169.58:4268/clientneg -m 5)
        new_ip=$(echo $new_ip | tr -d '"')
        public_ip=$new_ip
        # Update the V2Ray configuration file with the new IP
        if [ -n "$new_ip" ]; then
            sed -i "s/\"address\": \".*\"/\"address\": \"$new_ip\"/" /etc/v2ray/config.json
            logger -t fusionX "Updated V2Ray config with new IP: $new_ip"
            uci set fusionX.settings.public_ip=$public_ip
            uci commit fusionX
        else
            logger -t fusionX "Failed to retrieve new IP from management server"
        fi
        if [ -f /root/proxy.nft ]; then
            mv /root/proxy.nft /etc/nftables.d/
            logger -t fusionX "File /root/proxy.nft moved"
        else
            logger -t fusionX "File /root/proxy.nft does not exist"
        fi
        fw4 restart
        /etc/init.d/v2ray restart
    fi
}

reload() {
    startstop
}

# Start the bandwidth monitoring in the background